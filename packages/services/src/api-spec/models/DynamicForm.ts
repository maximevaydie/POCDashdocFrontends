// This file was generated by api-spec/openapi_to_ts.py. Do not edit it manually.

import * as z from "zod";

// @ts-ignore
import * as ExtensionTriggers from "./ExtensionTriggers";
// @ts-ignore
import * as Extensions from "./Extensions";

export type BaseParameterSpec = {
    key: string;
    name: string;
    is_required: boolean;
    section_name: string;
    arrow_name: string;
};
export const BaseParameterSpecSchema = z.object({
    key: z.string(),
    name: z.string(),
    is_required: z.boolean(),
    section_name: z.string(),
    arrow_name: z.string(),
});

export type ParameterSpecTypeId = "partner.shipper" | "logistic_point";
export const ParameterSpecTypeIdSchema = z.enum(["partner.shipper", "logistic_point"]);

export type ParameterSpecId = {
    key: string;
    name: string;
    is_required: boolean;
    section_name: string;
    arrow_name: string;
    type: ParameterSpecTypeId;
    initial_value: number | null;
};
export const ParameterSpecIdSchema = z.object({
    key: z.string(),
    name: z.string(),
    is_required: z.boolean(),
    section_name: z.string(),
    arrow_name: z.string(),
    type: ParameterSpecTypeIdSchema,
    initial_value: z.number().nullable(),
});

export type ParameterSpecTypeString = "text" | "password" | "email";
export const ParameterSpecTypeStringSchema = z.enum(["text", "password", "email"]);

export type ParameterSpecString = {
    key: string;
    name: string;
    is_required: boolean;
    section_name: string;
    arrow_name: string;
    type: ParameterSpecTypeString;
    initial_value: string;
};
export const ParameterSpecStringSchema = z.object({
    key: z.string(),
    name: z.string(),
    is_required: z.boolean(),
    section_name: z.string(),
    arrow_name: z.string(),
    type: ParameterSpecTypeStringSchema,
    initial_value: z.string(),
});

export type ParameterSpecTypeUid = "support_type";
export const ParameterSpecTypeUidSchema = z.enum(["support_type"]);

export type ParameterSpecUid = {
    key: string;
    name: string;
    is_required: boolean;
    section_name: string;
    arrow_name: string;
    type: ParameterSpecTypeUid;
    initial_value: string | null;
};
export const ParameterSpecUidSchema = z.object({
    key: z.string(),
    name: z.string(),
    is_required: z.boolean(),
    section_name: z.string(),
    arrow_name: z.string(),
    type: ParameterSpecTypeUidSchema,
    initial_value: z.string().nullable(),
});

export type Request = {
    parameters: Record<string, string | number | null>;
};
export const RequestSchema = z.object({
    parameters: z.record(z.string(), z.union([z.string(), z.number()]).nullable()),
});

export type SectionSpec = {
    name: string;
    description: string;
};
export const SectionSpecSchema = z.object({
    name: z.string(),
    description: z.string(),
});

export type Spec = {
    parameters: (ParameterSpecString | ParameterSpecId | ParameterSpecUid)[];
    sections: SectionSpec[];
};
export const SpecSchema = z.object({
    parameters: z.array(
        z.union([ParameterSpecStringSchema, ParameterSpecIdSchema, ParameterSpecUidSchema])
    ),
    sections: z.array(SectionSpecSchema),
});
